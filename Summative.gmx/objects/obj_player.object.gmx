<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set the player on top of planet 1 and initialize variables

vspeed = 10;
hspeed = 0;
inair = true;
selected = false;
image_speed = 0.2;
transition = 32;

//Create planets
planetL = instance_create(224, 320, obj_planet);
planetR = instance_create(1056, 320, obj_planet);
planet3 = planetR;

//Load highscore
ini_open("score.ini");
score_grid = ds_grid_create(1,1);
ds_grid_set(score_grid, 0, 0, ini_read_real('highscores', 'score', ''));
ini_close();
score = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Freeze jump animation

sprite_index = spr_player_inair;
image_index = 2;
image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check to see if the game is mid animation

if(transition == 32) {

    //Set variables
    fnetx = 0;
    fnety = 0;
    
    //Each planet calculates the gravity and applies it to the player
    with obj_planet {
    
        grav = radius * (material / 2) / (point_distance(obj_player.x, obj_player.y, x, y) ^ 2);
      
        //Translate force at an angle to up/down and left/right
        dir = point_direction(obj_player.x, obj_player.y, x, y);
        obj_player.fnetx += grav * cos(degtorad(dir));
        obj_player.fnety -= grav * sin(degtorad(dir));
        
        //Check to see if the player is on a planet
        if(collision_circle(x, y, radius, obj_player, true, true) != noone &amp;&amp; obj_player.inair) {
        
            //Stop motion
            obj_player.hspeed = 0;
            obj_player.vspeed = 0;
            obj_player.fnetx = 0;
            obj_player.fnety = 0;
            
            //Snap to edge of planet
            obj_player.x = x - (radius + 30) * cos(degtorad(dir));
            obj_player.y = y + (radius + 30) * sin(degtorad(dir));
            
            obj_player.inair = false;
            
            //If the player lands on the right planet
            if(self == obj_player.planetR) {
            
                //Go to animation phase and increase store
                obj_player.transition = 0;
                score++;
                
                //Update highscore if neccesary
                if(score &gt; ds_grid_get(obj_player.score_grid, 0, 0)) {
                
                    ds_grid_set(obj_player.score_grid, 0, 0, score);
                    ini_open("score.ini");
                    ini_write_real('highscores', 'score', ds_grid_get(obj_player.score_grid, 0, 0));
                    ini_close();
                    
                }
                                
            }
                 
        //If just outside planet ignore other planets' gravity
        } else if (collision_circle(x, y, radius + 64, obj_player, true, true) != noone) {
        
            obj_player.fnetx = 0;
            obj_player.fnety = 0;
        
            grav = radius * (material / 2) / (point_distance(obj_player.x, obj_player.y, x, y) ^ 2);
          
            dir = point_direction(obj_player.x, obj_player.y, x, y);
            obj_player.fnetx += grav * cos(degtorad(dir));
            obj_player.fnety -= grav * sin(degtorad(dir));
            
            break;
            
        }
    
    }
    
    if(inair) {
    
        hspeed += fnetx;
        vspeed += fnety;
    
    } else {
    
        hspeed = 0;
        vspeed = 0;
    
    }
    
    //Point to planet that player is falling to
    if(planetL.radius * (planetL.material / 2) / (point_distance(x, y, planetL.x, planetL.y) ^ 2) &gt; planetR.radius * (planetR.material / 2) / (point_distance(x, y, planetR.x, planetR.y) ^ 2)) {
    
        image_angle = point_direction(x, y, planetL.x, planetL.y) + 90;
    
    } else {
    
        image_angle = point_direction(x, y, planetR.x, planetR.y) + 90;
    
    }
    
    //Change sprites based on whether in air or not
    if(!inair){
        
        sprite_index = spr_player;
        image_speed = 0.2;
    
    }
    
    //Lose if too far outside room
    if(x &lt; -900 || y &lt; -900 || x &gt; room_width + 900 || y &gt; room_height + 900) {
    
        score = 0;
        room_goto(rm_lose);
    
    }

//Transition when land on right planet
} else {
        
    //Make a new planet
    if(transition == 0) { 
            
        planet3 = instance_create(1888, 320, obj_planet);
        
    }    
        
    //Move everything a frame's worth left    
    x -= 26;
    planetL.x -= 26;
    planetR.x -= 26;
    planet3.x -= 26;
    
    with obj_spike {
    
        x -= 26;
        
    }
    
    //Destory left planet at the end
    if (transition == 31) {
    
        with planetL {
        
            instance_destroy();
        
        }
        
        planetL = planetR;
        planetR = planet3;  
        
    }
    
    transition++;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_beetle">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Lose the game

score = 0;
room_goto(rm_lose);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_spike">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Lose the game

score = 0;
room_goto(rm_lose);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//If the player has been "wound up"

if(selected &amp;&amp; !inair) {

    //Gain velocity opposite to the location of the mouse
    dir = point_direction(mouse_x, mouse_y, x, y);
    dist = point_distance(mouse_x, mouse_y, x, y);
    
    hspeed = dist / 10 * cos(degtorad(dir));
    vspeed = dist / 10 * -sin(degtorad(dir));
    
    x += hspeed;
    y += vspeed;
    
    //Change sprite
    sprite_index = spr_player_inair;
    alarm[0] = 12;

}
    
//Update variables
inair = true;
selected = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>selected = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
